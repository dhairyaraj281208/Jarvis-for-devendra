# -*- coding: utf-8 -*-
"""Logistic regression

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_ym7Tn5p9k6ApNqw0HetWejogIklBPfU
"""

# Uploading the csv
# from google.colab import files
# # data_to_load = files.upload()

# Importing libraries
from wish import speak
from sklearn.linear_model import LogisticRegression
import numpy as np
import pandas as pd
import csv
import plotly.express as px
# from Ivan import speakWithoutSubs
import pyttsx3

engine = pyttsx3.init('sapi5')
voices = engine.getProperty('voices')
# print(voices[2])
engine.setProperty('voice', voices[0].id)

def speakWithoutSubs(audio):
    engine.say(audio)
    engine.runAndWait()

df = pd.read_csv("data2.csv")
score_list = df["Score"].tolist()
accepted_list = df["Accepted"].tolist()
# fig = px.scatter(x = score_list, y = accepted_list)
# fig.show()

score_array = np.array(score_list)
accepted_array = np.array(accepted_list)

# Slope and intercept using pre-built function of Numpy
m, c = np.polyfit(score_array, accepted_array, 1)

y = []
for x in score_array:
    y_value = m*x + c
    y.append(y_value)

# #plotting the graph
# fig = px.scatter(x=score_array, y=accepted_array)
# fig.update_layout(shapes=[
#     dict(
#       type= 'line',
#       y0= min(y), y1= max(y),
#       x0= min(score_array), x1= max(score_array)
#     )
# ])
# fig.show()

# import matplotlib.pyplot as plt


X = np.reshape(score_list, (len(score_list), 1))
Y = np.reshape(accepted_list, (len(accepted_list), 1))

lr = LogisticRegression()
lr.fit(X, Y)

# plt.figure()
# plt.scatter(X.ravel(), Y, color='black', zorder=20)


def model(x):
    return 1 / (1 + np.exp(-x))


# Using the line formula
X_test = np.linspace(0, 100, 200)
chances = model(X_test * lr.coef_ + lr.intercept_).ravel()

# plt.plot(X_test, chances, color='red', linewidth=3)
# plt.axhline(y=0, color='k', linestyle='-')
# plt.axhline(y=1, color='k', linestyle='-')
# plt.axhline(y=0.5, color='b', linestyle='--')

# # do hit and trial by changing the value of X_test
# plt.axvline(x=X_test[165], color='b', linestyle='--')

# plt.ylabel('y')
# plt.xlabel('X')
# plt.xlim(75, 85)
# plt.show()


def marks():
    speakWithoutSubs("Enter your marks here:-")
    user_score = float(input("Enter your marks here:- "))
    chances = model(user_score * lr.coef_ + lr.intercept_).ravel()[0]
    if chances <= 0.01:
        speak("The student will not get accepted")
    elif chances >= 1:
        speak("The student will get accepted!")
    elif chances < 0.5:
        speak("The student might not get accepted")
    else:
        speak("The student may get accepted")
